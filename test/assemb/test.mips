
#
# main ()
# {
#	int a;
#	a = mysub( 6 );
#	print ( a );
# }
#
	.data
EOL:	.asciiz "\n"
	.align 2
	.text
	.globl	main
main:
	sub	$sp, $sp, 4	# prologue
	sw	$ra, ($sp)	# 1. Push return addr
	sub	$sp, $sp, 4
	sw	$fp, ($sp)	# 2. push caller's fp
		     		# 3. No S regis to push
	sub	$fp, $sp, 4	# 4. $fp = $sp - space_for_vars
	move	$sp, $fp  	# 5. $sp = $fp
		     		# subroutine call
				# 1. no T regis to push
	li	$a0, 6		# 2. put arg into $a0
	jal	mysub		# 3. Jump and link to subroutine

				# return from subroutine
				# 1. No T regis to restore

	sw	$v0, 0($fp)	# a = mysub( 6 )

		     		# print a
	lw	$a0, 0($fp)	# load a into $a0
	li	$v0, 1		# print integer service
	syscall
	
	la	$a0, EOL
	li	$v0, 4
	syscall 
				# epilogue
	add	$sp, $fp, 4	# 2. $sp = $fp + space_for_vars
		     	  	# 3. no S regs to pop
	lw	$fp, ($sp)	# 4. pop $fp
	add	$sp, $sp, 4	#
	lw	$ra, ($sp)	# 5. pop $ra
	add	$sp, $sp, 4	#
	li	$v0, 10
	syscall
	jr	$ra  	  	# return to OS


#
# int mysub( int arg )
# {
#	int b, c;	// b: 0($fp)
#	       		// c: 4($fp)
#	b = arg * 2;
#	c = b + 7;
#
#	return c;
# }
#

	.text
	.globl mysub
mysub:
				# prologue
	sub	$sp, $sp, 4	# 1. push return address
	sw	$ra, ($sp)
	sub	$sp, $sp, 4	# 2. Push caller's fp
	sw	$fp, ($sp)
	sub	$sp, $sp, 4	# 3. push regi $s1
	sw	$s1, ($sp)
	sub	$fp, $sp, 8	# 4. $fp = $sp - space_for_vars
	move	$sp, $fp  	# 5. $sp = $fp

		     		# body of code
	mul	$s1, $a0, 2	#   arg * 2
	sw	$s1, 0 ($fp)	# b = "  "
	
	lw	$t0, 0 ($fp)	# get b
	add	$t0, $t0, 7	#   b + 7
	sw	$t0, 4 ($sp)	# c = "  "

		       		# epilogue
	lw	$v0, 4 ($fp)	# 1. put return value in $v0
	add	$sp, $fp, 8	# 2. $sp = $fp + space_for_vars
	lw	$s1, ($sp)	# 3. Pop register $s1
	add	$sp, $sp, 4	#
	lw	$fp, ($sp)	# 4. pop $fp
	add	$sp, $sp, 4	#
	lw	$fp, ($sp)	# 5. pop $ra
	add	$sp, $sp, 4	#
	jr	$ra  	  	# 6. return to caller


